#!/usr/bin/env ruby
# frozen_string_literal: true

require_relative '../lib/rmk.rb'

controller = Rmk::Controller.new
ui = false
build_interval = 60

OptionParser.new do |opts|
  opts.banner = 'Usage: rmk.rb [options] [target]'

  opts.on('-C', '--directory [directory]', 'Change to directory ') do |v|
    controller.dir = v
  end
  opts.on('-r', '--readonly', 'Raise exception when files are rebuild') do
    controller.policy = Rmk::ModificationTimeBuildPolicy.new(true)
  end
  opts.on('-a', '--always', 'build files unconditionally') do
    controller.policy = Rmk::AlwaysBuildPolicy.new
  end
  opts.on('-l', '--local',
          'build files unconditionally for root jobs inside local dir') do
    controller.policy = Rmk::LocalBuildPolicy.new
  end
  opts.on('-c', '--cache [url]', 'use build cache ') do |v|
    controller.policy = Rmk::CacheBuildPolicy.new(v)
  end
  opts.on('-v', '--verbose', 'verbose mode ') do |_v|
    Rmk.verbose += 1
  end
  opts.on('-t', '--threads [N]', 'allow N threads at parallel') do |v|
    Rmk::Job.threads = v.to_i
  end
  opts.on('-u', '--ui', 'start web ui') do
    ui = true
  end
end.parse!

controller.task = ARGV[0] || controller.task

EventMachine.run do
  if ui
    require_relative '../lib/ui.rb'
    Rmk::App.run(controller)
  else
    result = 0
    controller.after_build do
      EventMachine.stop
    end
    controller.run
  end
end
